# import packages and read data 

import pandas as pd
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

import numpy as np

import sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

import matplotlib.pyplot as plt
import seaborn as sn

pd.set_option('display.max_rows', 300) 
pd.options.display.float_format = '{:40,.3f}'.format 
plt.style.use('ggplot') 
%matplotlib inline


condition_X_final = pd.read_csv('cleandata5.csv')
condition_X.info()
condition_X.head()

# making the correlation matrix --didn't use 
df = condition_X_final
plt.rcParams["axes.grid"] = False
f = plt.figure(figsize=(19, 15))
plt.matshow(df.corr(), fignum=f.number)
plt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)
plt.yticks(range(df.shape[1]), df.columns, fontsize=14)
cb = plt.colorbar()
cb.ax.tick_params(labelsize=14)
plt.title('Correlation Matrix', fontsize=16)


# using VIF to elinimate multicollinary 
from statsmodels.stats.outliers_influence import variance_inflation_factor 
from statsmodels.tools.tools import add_constant
 
def drop_column_using_vif_(df, thresh=5):
    '''
    Calculates VIF each feature in a pandas dataframe, and repeatedly drop the columns with the highest VIF
    A constant must be added to variance_inflation_factor or the results will be incorrect

    :param df: the pandas dataframe containing only the predictor features, not the response variable
    :param thresh: (default 5) the threshould VIF value. If the VIF of a variable is greater than thresh, it should be removed from the dataframe
    :return: dataframe with multicollinear features removed
    '''
    while True:
        df_with_const = add_constant(df)

        vif_df = pd.Series([variance_inflation_factor(df_with_const.values, i) 
               for i in range(df_with_const.shape[1])], name= "VIF",
              index=df_with_const.columns).to_frame()

        vif_df = vif_df.drop('const')
        
        # if the largest VIF is above the thresh, remove a variable with the largest VIF
        # If there are multiple variabels with VIF>thresh, only one of them is removed. This is because we want to keep as many variables as possible
        if vif_df.VIF.max() > thresh:
            # If there are multiple variables with the maximum VIF, choose the first one
            index_to_drop = vif_df.index[vif_df.VIF == vif_df.VIF.max()].tolist()[0]
            print('Dropping: {}'.format(index_to_drop))
            df = df.drop(columns = index_to_drop)
        else:
            break

    return df

df_predictors_selected_VIF = drop_column_using_vif_(condition_X_final.drop('change in percentage of casaes per total population ', axis=1))
# build the regressio model 
conditionX= sm.OLS(endog=condition_X_final[['change in percentage of casaes per total population ']], exog=sm.add_constant(df_predictors_selected_VIF)).fit()
conditionX.summary()

# plot the residual plot 
plt.scatter(conditionX.fittedvalues, conditionX.resid)
plt.xlabel('Fitted change in budgets')
plt.ylabel('Residual')
plt.title('Residual vs. Fitted Plot of change in budgets')
plt.show()

# other kind of residual plot 
fig = plt.figure(figsize=(12,8))
fig = sm.graphics.plot_regress_exog(conditionX, 'clean_environ', fig=fig)
